
Fotorezytor_RGB_ADC_UART_IRQ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7c  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1f  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000432  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000215  00000000  00000000  0000235b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_21>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  d4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <ADCInit>:
#include <avr/interrupt.h>
#include <util/delay.h>

void ADCInit()
{
	ADMUX=_BV(REFS0) | _BV(MUX0);   //Nap. referencyjne równe Vcc, wejœcie pierwsze multipleksera
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	DIDR0=_BV(ADC1D);               //Wy³¹cz funkcjê cyfrow¹ pinu nr 1
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRB=_BV(ADTS2) | _BV(ADTS0);	//Ustaw wyzwalanie zdarzeniem timer1 compare match B
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADCSRA=_BV(ADEN) | _BV(ADATE) | _BV(ADPS2)| _BV(ADPS1)| _BV(ADPS0)|_BV(ADIE); //Preskaler ADC - 128, w³¹cz ADC, wyzwalanie, przerwanie
  ee:	8f ea       	ldi	r24, 0xAF	; 175
  f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f4:	08 95       	ret

000000f6 <TMER_init>:
}

void TMER_init()
{
	TCCR1B=_BV(CS12) | _BV(CS10) | _BV(WGM12);		// Preskaler 1024, tryb CTC
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A=7812;										// Top zliczania w trybie CTC
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	9e e1       	ldi	r25, 0x1E	; 30
 100:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 104:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B=7812;
 108:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 10c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 110:	08 95       	ret

00000112 <__vector_21>:
}

volatile uint16_t ADCVal;

ISR(ADC_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 	
	TIFR1|=_BV(OCF1B);								//Zeruj flage przerwania timer1 compare match B
 138:	b2 9a       	sbi	0x16, 2	; 22
	USART_sendchar(ADCH);
 13a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 13e:	0e 94 06 01 	call	0x20c	; 0x20c <USART_sendchar>
	USART_sendchar(ADCL);
 142:	c8 e7       	ldi	r28, 0x78	; 120
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	88 81       	ld	r24, Y
 148:	0e 94 06 01 	call	0x20c	; 0x20c <USART_sendchar>
	ADCVal = ADC;
 14c:	88 81       	ld	r24, Y
 14e:	99 81       	ldd	r25, Y+1	; 0x01
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:

int main(void)
{
	ADCInit();								//Inicjalizacja ADC
 17e:	0e 94 6e 00 	call	0xdc	; 0xdc <ADCInit>
	USART_init();							//Inicjalizacja USART
 182:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_init>
	TMER_init();							//Inicjalizacja Timera
 186:	0e 94 7b 00 	call	0xf6	; 0xf6 <TMER_init>
	ADCSRA|=_BV(ADSC);						//Rozpocznij przetwarzanie ADC
 18a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	DDRD = _BV(PD2)|_BV(PD3)|_BV(PD4);		// Ustaw wyjscie DIODY RGB
 194:	8c e1       	ldi	r24, 0x1C	; 28
 196:	8a b9       	out	0x0a, r24	; 10
	PORTD = _BV(PD2)|_BV(PD3)|_BV(PD4);		// Ustaw piny na HIGH dla RGB
 198:	8b b9       	out	0x0b, r24	; 11
	DDRD |= _BV(PD5);						// Ustaw wyjscie do anody DIODY
 19a:	55 9a       	sbi	0x0a, 5	; 10
	PORTD |= _BV(PD5);						// Ustaw pin na HIGH dla anody DIODY
 19c:	5d 9a       	sbi	0x0b, 5	; 11
	sei();									// Odblokuj przerwania
 19e:	78 94       	sei

	
    while (1) 
    {
		if (ADCVal <= 200){
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a8:	89 3c       	cpi	r24, 0xC9	; 201
 1aa:	91 05       	cpc	r25, r1
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <main+0x38>
			PORTD &= ~_BV(PD4);
 1ae:	5c 98       	cbi	0x0b, 4	; 11
			PORTD |= _BV(PD2) | _BV(PD3)| _BV(PD5);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8c 62       	ori	r24, 0x2C	; 44
 1b4:	18 c0       	rjmp	.+48     	; 0x1e6 <main+0x68>
		}
		else if (ADCVal <= 300){
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	8d 32       	cpi	r24, 0x2D	; 45
 1c0:	91 40       	sbci	r25, 0x01	; 1
 1c2:	20 f4       	brcc	.+8      	; 0x1cc <main+0x4e>
			PORTD &= ~_BV(PD3);
 1c4:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |= _BV(PD2) | _BV(PD4)| _BV(PD5);
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	84 63       	ori	r24, 0x34	; 52
 1ca:	0d c0       	rjmp	.+26     	; 0x1e6 <main+0x68>
		}
		else if (ADCVal <= 400){
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	81 39       	cpi	r24, 0x91	; 145
 1d6:	91 40       	sbci	r25, 0x01	; 1
 1d8:	20 f4       	brcc	.+8      	; 0x1e2 <main+0x64>
			PORTD &= ~_BV(PD2);
 1da:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |= _BV(PD4) | _BV(PD3)| _BV(PD5);
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	88 63       	ori	r24, 0x38	; 56
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <main+0x68>
		}
		else 
			PORTD |= (_BV(PD2) | _BV(PD3) | _BV(PD4));
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	8c 61       	ori	r24, 0x1C	; 28
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	db cf       	rjmp	.-74     	; 0x1a0 <main+0x22>

000001ea <USART_init>:

static void uart_9600()
{
	#define BAUD 9600
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
 1ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
 1ee:	87 e6       	ldi	r24, 0x67	; 103
 1f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	#if USE_2X
	UCSR0A |= (1 << U2X0);
	#else
	UCSR0A &= ~(1 << U2X0);
 1f4:	e0 ec       	ldi	r30, 0xC0	; 192
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	80 83       	st	Z, r24
}

void USART_init()
{
	uart_9600();						//Ustal szybkoœæ transferu na 9600 bps
	UCSR0B=_BV(TXEN0);					//Odblokuj nadajnik
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C=_BV(UCSZ00) | _BV(UCSZ01);	//8 bitów danych + 1 bit stopu
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 20a:	08 95       	ret

0000020c <USART_sendchar>:
}

void USART_sendchar(uint8_t c)
{
	while(!(UCSR0A & (1<<UDRE0)));	//Zaczekaj na miejsce w buforze nadawczym
 20c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 210:	95 ff       	sbrs	r25, 5
 212:	fc cf       	rjmp	.-8      	; 0x20c <USART_sendchar>
	UDR0=c;
 214:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
